Timer unit: 1e-06 s

Total time: 0 s
File: /home/luca/devtools_scicomp/devtools_scicomp_project_2025/src/pyclassify/utils.py
Function: distance at line 10

Line #      Hits         Time  Per Hit   % Time  Line Contents
==============================================================
    10                                           @profile
    11                                           def distance(point1: List[float], point2: List[float]) -> float:
    12                                               """
    13                                               Computes the square of the Euclidean distance between two points.
    14                                               
    15                                               Args:
    16                                                   point1 (List[float]): The first point.
    17                                                   point2 (List[float]): The second point.
    18                                               
    19                                               Returns:
    20                                                   float: The squared Euclidean distance between point1 and point2.
    21                                               """
    22                                               if len(point1) != len(point2):
    23                                                   raise ValueError("Unmatching dimensions")
    24                                               
    25                                               return sum((p1 - p2) ** 2 for p1, p2 in zip(point1, point2))

Total time: 0 s
File: /home/luca/devtools_scicomp/devtools_scicomp_project_2025/src/pyclassify/utils.py
Function: distance_numpy at line 71

Line #      Hits         Time  Per Hit   % Time  Line Contents
==============================================================
    71                                           @profile
    72                                           def distance_numpy(point1: ndarray, point2: ndarray) -> float:
    73                                               """
    74                                               Computes the square of the Euclidean distance between two points.
    75                                               
    76                                               Args:
    77                                                   point1 (List[float]): The first point.
    78                                                   point2 (List[float]): The second point.
    79                                               
    80                                               Returns:
    81                                                   float: The squared Euclidean distance between point1 and point2.
    82                                               """
    83                                               if len(point1) != len(point2):
    84                                                   raise ValueError("Unmatching dimensions")
    85                                               
    86                                               if not isinstance(point1, np.ndarray) and not isinstance(point2, np.ndarray):
    87                                                   raise TypeError("You should pass a numpy array")
    88                                               
    89                                               dist = np.sum((point1 - point2)**2)
    90                                               return dist

Total time: 0.00339535 s
File: /home/luca/devtools_scicomp/devtools_scicomp_project_2025/src/pyclassify/utils.py
Function: majority_vote at line 47

Line #      Hits         Time  Per Hit   % Time  Line Contents
==============================================================
    47                                           @profile
    48                                           def majority_vote(neighbors: List[int]):
    49                                               """
    50                                               Returns the majority class among all the labels that we find in the list passed as argument, which stores the labels of all the k-nearest neighbors.
    51                                               """
    52                                               #Dictionary of labels:
    53       921        118.7      0.1      3.5      labels = {}
    54                                           
    55      5526        611.3      0.1     18.0      for label in neighbors:
    56      4605        580.1      0.1     17.1          if label in labels:
    57      3211        502.1      0.2     14.8              labels[label] += 1
    58                                                   else:
    59      1394        233.9      0.2      6.9              labels[label] = 1
    60                                           
    61                                               # Find the class label with the maximum count
    62       921        123.0      0.1      3.6      majority_class = None
    63       921         85.9      0.1      2.5      max_count = 0
    64      2315        594.8      0.3     17.5      for label, count in labels.items():
    65      1394        198.1      0.1      5.8          if count > max_count:
    66      1069        125.6      0.1      3.7              majority_class = label
    67      1069        121.9      0.1      3.6              max_count = count
    68                                               
    69       921        100.1      0.1      2.9      return majority_class

Total time: 1.42404 s
File: /home/luca/devtools_scicomp/devtools_scicomp_project_2025/src/pyclassify/utils.py
Function: distance_numba at line 27

Line #      Hits         Time  Per Hit   % Time  Line Contents
==============================================================
    27                                           @profile
    28                                           def distance_numba(point1: ndarray, point2: ndarray) -> float:
    29                                               """
    30                                               Computes the square of the Euclidean distance between two points.
    31                                               
    32                                               Args:
    33                                                   point1 (List[float]): The first point.
    34                                                   point2 (List[float]): The second point.
    35                                               
    36                                               Returns:
    37                                                   float: The squared Euclidean distance between point1 and point2.
    38                                               """
    39   3389280     381427.2      0.1     26.8      if len(point1) != len(point2):
    40                                                   raise ValueError("Unmatching dimensions")
    41                                               
    42   3389280     363404.4      0.1     25.5      if not isinstance(point1, np.ndarray) and not isinstance(point2, np.ndarray):
    43                                                   raise TypeError("You should pass a numpy array")
    44                                               
    45   3389280     679206.2      0.2     47.7      return _distance_numba(point1, point2)

Total time: 6.92944 s
File: /home/luca/devtools_scicomp/devtools_scicomp_project_2025/src/pyclassify/classifier.py
Function: _get_k_nearest_neighbors at line 37

Line #      Hits         Time  Per Hit   % Time  Line Contents
==============================================================
    37                                               @profile
    38                                               def _get_k_nearest_neighbors(self, X, y, x):
    39                                                   """
    40                                                   Finds the k nearest neighbors of the point x based on Euclidean distance.
    41                                                   
    42                                                   Args:
    43                                                       X (list of lists): The dataset of points (features).
    44                                                       y (list): The corresponding labels of the points in X.
    45                                                       x (list): The new point to classify.
    46                                                   
    47                                                   Returns:
    48                                                       list: A list of class labels of the k nearest neighbors of x.
    49                                                   """
    50       921        101.9      0.1      0.0          distances = []
    51   3390201     271315.7      0.1      3.9          for i in range(len(X)):
    52   3389280    5586858.3      1.6     80.6              dist = self.distance(x, X[i])  # Use the distance function from utils.py
    53   3389280     591167.8      0.2      8.5              distances.append((dist, y[i]))  # Store the distance and corresponding label
    54                                                   
    55       921     478870.3    519.9      6.9          distances.sort(key=lambda x: x[0])  # Sort by distance
    56       921       1020.9      1.1      0.0          k_nearest_neighbors = [label for _, label in distances[:self.k]]
    57                                                   
    58       921        105.9      0.1      0.0          return k_nearest_neighbors

Total time: 8.00135 s
File: /home/luca/devtools_scicomp/devtools_scicomp_project_2025/src/pyclassify/classifier.py
Function: __call__ at line 60

Line #      Hits         Time  Per Hit   % Time  Line Contents
==============================================================
    60                                               @profile
    61                                               def __call__(self, data: Tuple[List[List[float]], List[int]], new_points: List[List[float]]):
    62                                                   """
    63                                                   Classifies a list of new points by finding their k nearest neighbors and performing majority voting.
    64                                                   
    65                                                   Args:
    66                                                       data (tuple): A tuple containing the feature matrix (X) and the labels (y).
    67                                                       new_points (list): A list of points to classify.
    68                                                   
    69                                                   Returns:
    70                                                       list: A list of predicted class labels for each point in new_points.
    71                                                   """
    72         1          0.7      0.7      0.0          X, y = data  # Unpack the feature matrix and labels
    73                                           
    74                                                   #Recast data type properly:
    75         1          0.5      0.5      0.0          if not self.backhand == "plain":
    76         1       7982.7   7982.7      0.1              X = np.array(X)
    77         1       1947.0   1947.0      0.0              new_points = np.array(new_points)
    78                                                   
    79         1          0.5      0.5      0.0          predictions = []  # To store the predicted classes for each new point
    80                                                   
    81       922        272.1      0.3      0.0          for point in new_points:
    82                                                       # Get the k nearest neighbors for the current point
    83       921    7983529.8   8668.3     99.8              neighbors = self._get_k_nearest_neighbors(X, y, point)
    84                                                       
    85                                                       # Perform majority voting to get the predicted class
    86       921       7430.2      8.1      0.1              predicted_class = majority_vote(neighbors)
    87                                                       
    88                                                       # Store the predicted class for the current point
    89       921        183.4      0.2      0.0              predictions.append(predicted_class)
    90                                                   
    91         1          0.1      0.1      0.0          return predictions

  0.00 seconds - /home/luca/devtools_scicomp/devtools_scicomp_project_2025/src/pyclassify/utils.py:10 - distance
  0.00 seconds - /home/luca/devtools_scicomp/devtools_scicomp_project_2025/src/pyclassify/utils.py:71 - distance_numpy
  0.00 seconds - /home/luca/devtools_scicomp/devtools_scicomp_project_2025/src/pyclassify/utils.py:47 - majority_vote
  1.42 seconds - /home/luca/devtools_scicomp/devtools_scicomp_project_2025/src/pyclassify/utils.py:27 - distance_numba
  6.93 seconds - /home/luca/devtools_scicomp/devtools_scicomp_project_2025/src/pyclassify/classifier.py:37 - _get_k_nearest_neighbors
  8.00 seconds - /home/luca/devtools_scicomp/devtools_scicomp_project_2025/src/pyclassify/classifier.py:60 - __call__
